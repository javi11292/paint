{"version":3,"sources":["reducers/index.js","libraries/socket.js","components/Canvas/useLogic.js","components/Canvas/useStyles.js","components/Canvas/index.js","components/App/useLogic.js","components/App/index.js","serviceWorker.js","index.js"],"names":["loading","state","reducer","value","socket","io","transports","useLogic","useState","points","setPoints","canvas","useRef","isDrawing","useEffect","on","context","length","beginPath","fillStyle","lineWidth","initial","current","moveTo","lineTo","stroke","draw","getContext","off","ratioX","width","clientWidth","ratioY","height","clientHeight","emit","toggleDrawing","drawing","nativeEvent","offsetX","offsetY","addPoint","makeStyles","root","position","background","display","alignItems","justifyContent","container","maxWidth","maxHeight","svg","touchAction","top","left","Canvas","classes","useStyles","className","onPointerDown","onPointerUp","onPointerMove","ref","update","setUpdate","callback","detail","postMessage","type","window","location","reload","addEventListener","removeEventListener","handleClose","shouldUpdate","theme","createMuiTheme","spacing","factor","App","reducers","MuiThemeProvider","CssBaseline","Dialog","onClose","open","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","onClick","color","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","checkValidServiceWorker","dispatchEvent","CustomEvent","waiting"],"mappings":"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","file":"static/js/main.00d9d8b8.chunk.js","sourcesContent":["export default {\n    loading: {\n        state: false,\n        reducer: (state, value) => value,\n    },\n}","import io from \"socket.io-client\"\n\nconst HOST = \"https://javiscript-paint.herokuapp.com/\"\n\nconst socket = io(HOST, { transports: [\"websocket\"] })\n\nexport default socket","import { useRef, useState, useEffect } from \"react\"\nimport socket from \"libraries/socket\"\n\nfunction useLogic() {\n    const [points, setPoints] = useState([])\n    const canvas = useRef()\n    const isDrawing = useRef(false)\n\n    function toggleDrawing(drawing) {\n        return ({ nativeEvent }) => {\n            isDrawing.current = drawing\n            const { offsetX, offsetY } = nativeEvent\n            if (drawing) setPoints([[offsetX, offsetY]])\n        }\n    }\n\n    function addPoint({ nativeEvent }) {\n        if (isDrawing.current) {\n            const { offsetX, offsetY } = nativeEvent\n            setPoints(([initial, current]) => [current ? current : initial, [offsetX, offsetY]])\n        }\n    }\n\n    useEffect(() => {\n        socket.on(\"draw\", points => draw(canvas.current.getContext(\"2d\"), points))\n        return () => socket.off(\"draw\")\n    }, [])\n\n    useEffect(() => {\n        if (points.length !== 2) return\n        const [initial, current] = points\n        const [ratioX, ratioY] = [canvas.current.width / canvas.current.clientWidth, canvas.current.height / canvas.current.clientHeight]\n        socket.emit(\"draw\", [\n            [ratioX * initial[0], ratioY * initial[1]],\n            [ratioX * current[0], ratioY * current[1]]\n        ])\n    }, [points])\n\n    return { canvas, toggleDrawing, addPoint }\n}\n\nfunction draw(context: CanvasRenderingContext2D, points) {\n    if (points.length !== 2) return\n    context.beginPath()\n    context.fillStyle = \"#000000\"\n    context.lineWidth = 10\n\n    const [initial, current] = points\n\n    context.moveTo(...initial)\n    context.lineTo(...current)\n    context.stroke()\n}\n\nexport default useLogic","import { makeStyles } from \"@material-ui/core\"\n\nexport default makeStyles(() => ({\n    root: {\n        position: \"absolute\",\n        background: \"black\",\n        width: \"100%\",\n        height: \"100%\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n    },\n    container: {\n        background: \"white\",\n        position: \"relative\",\n        maxWidth: \"100%\",\n        maxHeight: \"100%\",\n        width: \"100%\",\n        height: \"auto\",\n        \"@media (min-aspect-ratio: 16/9)\": {\n            width: \"auto\",\n            height: \"100%\",\n        }\n    },\n    svg: {\n        display: \"block\",\n        width: \"100%\",\n        height: \"auto\",\n        \"@media (min-aspect-ratio: 16/9)\": {\n            width: \"auto\",\n            height: \"100%\",\n        }\n    },\n    canvas: {\n        position: \"absolute\",\n        touchAction: \"none\",\n        top: 0,\n        left: 0,\n        width: \"100%\",\n        height: \"100%\",\n        display: \"block\",\n    }\n}))","import React from \"react\"\nimport useLogic from \"./useLogic\"\nimport useStyles from \"./useStyles\"\n\nconst Canvas = () => {\n    const classes = useStyles()\n    const { canvas, toggleDrawing, addPoint } = useLogic()\n\n    return (\n        <div className={classes.root}>\n            <div className={classes.container}>\n                <svg className={classes.svg} width=\"16\" height=\"9\" />\n                <canvas\n                    width=\"1920\"\n                    height=\"1080\"\n                    onPointerDown={toggleDrawing(true)}\n                    onPointerUp={toggleDrawing(false)}\n                    onPointerMove={addPoint}\n                    ref={canvas}\n                    className={classes.canvas} />\n            </div>\n        </div>\n    )\n}\n\nexport default Canvas","import { useState, useEffect } from \"react\"\n\nfunction useLogic() {\n    const [update, setUpdate] = useState()\n\n    useEffect(() => {\n        function callback({ detail }) {\n            setUpdate(() => () => {\n                detail.postMessage({ type: \"SKIP_WAITING\" })\n                window.location.reload()\n            })\n        }\n\n        window.addEventListener(\"update\", callback)\n\n        return () => window.removeEventListener(\"update\", callback)\n    }, [])\n\n    function handleClose(shouldUpdate) {\n        return () => {\n            if (shouldUpdate) {\n                update()\n            } else {\n                setUpdate()\n            }\n        }\n    }\n\n    return { update, handleClose }\n}\n\nexport default useLogic","import React from \"react\"\nimport {\n    createMuiTheme,\n    MuiThemeProvider,\n    CssBaseline,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogContentText,\n    DialogActions,\n    Button,\n} from \"@material-ui/core\"\nimport { Store } from \"eztore\"\nimport reducers from \"reducers\"\nimport Canvas from \"components/Canvas\"\nimport useLogic from \"./useLogic\"\n\nconst theme = createMuiTheme({\n    spacing: factor => `${0.5 * factor}rem`,\n})\n\nconst App = () => {\n    const { update, handleClose } = useLogic()\n\n    return (\n        <Store reducers={reducers}>\n            <MuiThemeProvider theme={theme}>\n                <CssBaseline />\n                <Dialog onClose={handleClose} open={!!update}>\n                    <DialogTitle>Nuevo contenido disponible</DialogTitle>\n\n                    <DialogContent>\n                        <DialogContentText>Pulsa \"Actualizar\" para obtener la última versión</DialogContentText>\n                    </DialogContent>\n\n                    <DialogActions>\n                        <Button onClick={handleClose(false)} color=\"secondary\">Descartar</Button>\n                        <Button onClick={handleClose(true)} color=\"primary\">Actualizar</Button>\n                    </DialogActions>\n                </Dialog>\n                \n                <Canvas />\n            </MuiThemeProvider>\n        </Store>\n    )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"components/App\"\nimport * as serviceWorker from \"serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\nfunction onUpdate(registration) {\n    window.dispatchEvent(new CustomEvent(\"update\", { detail: registration.waiting }))\n}\n\nserviceWorker.register({ onUpdate })"],"sourceRoot":""}