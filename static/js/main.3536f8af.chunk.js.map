{"version":3,"sources":["reducers/index.js","libraries/socket.js","components/Canvas/useLogic.js","components/Canvas/useStyles.js","components/Canvas/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["loading","state","reducer","value","socket","io","useLogic","useState","points","setPoints","canvas","useRef","isDrawing","useEffect","on","context","length","beginPath","fillStyle","lineWidth","initial","current","moveTo","lineTo","stroke","draw","getContext","off","ratioX","width","clientWidth","ratioY","height","clientHeight","emit","toggleDrawing","drawing","nativeEvent","offsetX","offsetY","addPoint","makeStyles","root","position","background","display","alignItems","justifyContent","container","maxWidth","maxHeight","svg","touchAction","top","left","Canvas","classes","useStyles","className","onPointerDown","onPointerUp","onPointerMove","ref","theme","createMuiTheme","spacing","factor","App","reducers","MuiThemeProvider","CssBaseline","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3536f8af.chunk.js","sourcesContent":["export default {\r\n    loading: {\r\n        state: false,\r\n        reducer: (state, value) => value,\r\n    },\r\n}","import io from \"socket.io-client\"\r\n\r\nconst HOST = \"https://javiscript-paint.herokuapp.com/\"\r\n\r\nconst socket = io(HOST)\r\n\r\nexport default socket","import { useRef, useState, useEffect } from \"react\"\r\nimport socket from \"libraries/socket\"\r\n\r\nfunction useLogic() {\r\n    const [points, setPoints] = useState([])\r\n    const canvas = useRef()\r\n    const isDrawing = useRef(false)\r\n\r\n    function toggleDrawing(drawing) {\r\n        return ({ nativeEvent }) => {\r\n            isDrawing.current = drawing\r\n            const { offsetX, offsetY } = nativeEvent\r\n            if (drawing) setPoints([[offsetX, offsetY]])\r\n        }\r\n    }\r\n\r\n    function addPoint({ nativeEvent }) {\r\n        if (isDrawing.current) {\r\n            const { offsetX, offsetY } = nativeEvent\r\n            setPoints(([initial, current]) => [current ? current : initial, [offsetX, offsetY]])\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        socket.on(\"draw\", points => draw(canvas.current.getContext(\"2d\"), points))\r\n        return () => socket.off(\"draw\")\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (points.length !== 2) return\r\n        const [initial, current] = points\r\n        const [ratioX, ratioY] = [canvas.current.width / canvas.current.clientWidth, canvas.current.height / canvas.current.clientHeight]\r\n        socket.emit(\"draw\", [\r\n            [ratioX * initial[0], ratioY * initial[1]],\r\n            [ratioX * current[0], ratioY * current[1]]\r\n        ])\r\n    }, [points])\r\n\r\n    return { canvas, toggleDrawing, addPoint }\r\n}\r\n\r\nfunction draw(context: CanvasRenderingContext2D, points) {\r\n    if (points.length !== 2) return\r\n    context.beginPath()\r\n    context.fillStyle = \"#000000\"\r\n    context.lineWidth = 10\r\n\r\n    const [initial, current] = points\r\n\r\n    context.moveTo(...initial)\r\n    context.lineTo(...current)\r\n    context.stroke()\r\n}\r\n\r\nexport default useLogic","import { makeStyles } from \"@material-ui/core\"\r\n\r\nexport default makeStyles(() => ({\r\n    root: {\r\n        position: \"absolute\",\r\n        background: \"black\",\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n    },\r\n    container: {\r\n        background: \"white\",\r\n        position: \"relative\",\r\n        maxWidth: \"100%\",\r\n        maxHeight: \"100%\",\r\n        width: \"100%\",\r\n        height: \"auto\",\r\n        \"@media (min-aspect-ratio: 16/9)\": {\r\n            width: \"auto\",\r\n            height: \"100%\",\r\n        }\r\n    },\r\n    svg: {\r\n        display: \"block\",\r\n        width: \"100%\",\r\n        height: \"auto\",\r\n        \"@media (min-aspect-ratio: 16/9)\": {\r\n            width: \"auto\",\r\n            height: \"100%\",\r\n        }\r\n    },\r\n    canvas: {\r\n        position: \"absolute\",\r\n        touchAction: \"none\",\r\n        top: 0,\r\n        left: 0,\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        display: \"block\",\r\n    }\r\n}))","import React from \"react\"\r\nimport useLogic from \"./useLogic\"\r\nimport useStyles from \"./useStyles\"\r\n\r\nconst Canvas = () => {\r\n    const classes = useStyles()\r\n    const { canvas, toggleDrawing, addPoint } = useLogic()\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className={classes.container}>\r\n                <svg className={classes.svg} width=\"16\" height=\"9\" />\r\n                <canvas\r\n                    width=\"1920\"\r\n                    height=\"1080\"\r\n                    onPointerDown={toggleDrawing(true)}\r\n                    onPointerUp={toggleDrawing(false)}\r\n                    onPointerMove={addPoint}\r\n                    ref={canvas}\r\n                    className={classes.canvas} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Canvas","import React from \"react\"\r\nimport { createMuiTheme, MuiThemeProvider, CssBaseline } from \"@material-ui/core\"\r\nimport { Store } from \"eztore\"\r\nimport reducers from \"reducers\"\r\nimport Canvas from \"components/Canvas\"\r\n\r\nconst theme = createMuiTheme({\r\n    spacing: factor => `${0.5 * factor}rem`,\r\n})\r\n\r\nconst App = () => (\r\n    <Store reducers={reducers}>\r\n        <MuiThemeProvider theme={theme}>\r\n            <CssBaseline />\r\n            <Canvas />\r\n        </MuiThemeProvider>\r\n    </Store>\r\n)\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport App from \"components/App\"\r\nimport * as serviceWorker from \"serviceWorker\"\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"))\r\n\r\nserviceWorker.register()"],"sourceRoot":""}